[
    {
        "hash": "ac1b7aa79a2d040c7491d1cc9b3e5c28e85161c0",
        "date": "2020-09-14T12:17:10+02:00",
        "file": "game_of_life.py",
        "content": "import pygame, time, random, sys\nimport numpy as np\n\nclass Game:\n\n    def __init__(self, width, height, nxC, nyC):\n        pygame.init()\n        # Estado de las celdas:\n        #   - 1: celula viva\n        #   - 0: celula muerta\n        self.width = width\n        self.height = height\n        self.nxC = nxC\n        self.nyC = nyC\n        self.dimCW = width / nxC\n        self.dimCH = height / nyC\n        self.gameState = np.zeros((nxC, nyC))\n        self.newGameState = np.zeros((nxC, nyC))\n        self.pause = True\n        self.cell_color = [[128, 128, 128], [255, 255, 255]]\n        self.font = pygame.font.Font('KidGames.ttf',64)\n\n    def event_handler(self):\n        for event in pygame.event.get():\n            # Detectamos si se presiona una tecla\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit('user quit')\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    self.pause = not self.pause\n                \n                # PATRONES\n                if event.key == pygame.K_a:\n                    # patron acorn\n                    self.draw_acorn()\n                if event.key == pygame.K_o:\n                    # oscilador 9x9\n                    self.draw_oscilator9x9()\n                if event.key == pygame.K_u:\n                    # oscilador 13x13\n                    self.draw_oscilator13x13()\n                if event.key == pygame.K_k:\n                    # oscilador 12x12\n                    self.draw_oscilator12x12()\n                if event.key == pygame.K_q:\n                    # oscilador 10x3\n                    self.draw_oscilator10x3()\n                if event.key == pygame.K_s:\n                    # oscilador 6x6\n                    self.draw_oscilator6x6()\n                if event.key == pygame.K_w:\n                    # oscilador 4x4\n                    self.draw_oscilator4x4()\n                if event.key == pygame.K_x:\n                    # automata movil 3x3\n                    self.draw_movil3x3()\n                if event.key == pygame.K_n:\n                    # automata movil 7x4\n                    self.draw_movil7x4()\n                if event.key == pygame.K_p:\n                    # automata palo 1x3\n                    self.draw_stick()\n                if event.key == pygame.K_v:\n                    # pistola vertical 36x9\n                    self.draw_gun36x9()\n                if event.key == pygame.K_h:\n                    # pistola horizontal 9x36\n                    self.draw_gun9x36()\n                    \n                # BORRAR\n                if event.key == pygame.K_d:\n                    self.gameState = np.zeros((self.nxC, self.nyC))\n                    time.sleep(0.01)\n                \n                # COLOR DE CELDA\n                if event.key == pygame.K_r:\n                    # Rojo\n                    self.cell_color[1] = [255,0,0]\n                if event.key == pygame.K_g:\n                    # Verde\n                    self.cell_color[1] = [0,255,0]\n                if event.key == pygame.K_b:\n                    # Azul\n                    self.cell_color[1] = [0,0,255]\n                if event.key == pygame.K_c:\n                    # Cyan\n                    self.cell_color[1] = [0,255,255]\n                if event.key == pygame.K_m:\n                    # Magenta\n                    self.cell_color[1] = [255,0,255]\n                if event.key == pygame.K_y:\n                    # Amarillo\n                    self.cell_color[1] = [255,255,0]\n                if event.key == pygame.K_z:\n                    # Random color\n                    self.cell_color[1] = [random.randint(0,255),random.randint(0,255),random.randint(0,255)]\n                \n                # SALIR\n                if event.key == pygame.K_ESCAPE:\n                    pygame.quit()\n                    sys.exit('user quit')\n\n            #Detectamos si se presiona el raton\n            if sum(pygame.mouse.get_pressed()) > 0:\n                posX, posY = pygame.mouse.get_pos()\n                celX, celY = int(np.floor(posX / self.dimCW)), int(np.floor(posY / self.dimCH))\n                if celX < self.nxC and celY < self.nyC:\n                    self.gameState[celX, celY] = not pygame.mouse.get_pressed()[2]\n\n    def update(self, x, y):\n        # Calculamos los vecinos cercanos\n        n_neigh = self.gameState[(x - 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y + 1) % self.nyC]\n\n        # Reglas:\n        #   - 1: Una celula muerta con 3 celulas vecinas vivas, revive\n        #   - 2: Una celula viva con menos de 2 o mas de 3 vecinas vivas, muere\n        if self.gameState[x, y] == 0 and n_neigh == 3:\n            self.newGameState[x, y] = 1\n        elif self.gameState[x, y] == 1 and (n_neigh < 2 or n_neigh > 3):\n            self.newGameState[x, y] = 0\n\n    def draw(self, screen):\n\n        self.draw_pause(screen)\n        self.newGameState = np.copy(self.gameState)\n\n        for y in range(self.nxC):\n            for x in range(self.nyC):\n                if not self.pause:\n                    self.update(x, y)\n\n                # Creamos el poligono de cada celda a dibujar\n                poly = [\n                    ((x)     * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y + 1) * self.dimCH),\n                    ((x)     * self.dimCW, (y + 1) * self.dimCH),\n                ]\n\n                # Dibujamos la celda para cada par x e y\n                color = self.cell_color[int(self.newGameState[x, y])]\n                border = not self.newGameState[x, y]\n                pygame.draw.polygon(screen, color, poly, border)\n        # Actualizamos el estado\n        self.gameState = np.copy(self.newGameState)\n\n    def draw_pause(self, screen):\n\n        if self.pause:\n            color_pause = (255,0,0)\n            text_pause = 'PAUSE'\n        else:\n            color_pause = (0,255,0)\n            text_pause = 'RUNNING'\n\n        text = self.font.render(text_pause, True, color_pause)\n        w = self.width + (500 - text.get_width()) / 2\n        h = (100 - text.get_height()) / 2\n        screen.blit(text, (w, h))\n\n    # Patron Acorn\n    def draw_acorn(self):\n    \n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 8)\n\n        self.gameState[x:x+7,y:y+3] = [[0,0,1],\n                                       [1,0,1],\n                                       [0,0,0],\n                                       [0,1,0],\n                                       [0,0,1],\n                                       [0,0,1],\n                                       [0,0,1]]\n\n    # Automata palo 1x3\n    def draw_stick(self):\n\n        x = random.randint(0, self.nxC - 1)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x,y:y+3] = [1,1,1]\n\n    # Automata movil 3x3\n    def draw_movil3x3(self):\n\n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+3,y:y+3] = [[0,1,0],\n                                       [0,0,1],\n                                       [1,1,1]]\n\n    # Automata movil 7x4\n    def draw_movil7x4(self):\n\n        x = random.randint(0, self.nxC - 8)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+7,y:y+4] = [[0,1,1,0],\n                                       [1,1,1,0],\n                                       [1,1,1,0],\n                                       [1,1,1,0],\n                                       [1,1,0,1],\n                                       [0,1,1,1],\n                                       [0,0,1,0]]\n\n    # Oscilador 13x13\n    def draw_oscilator13x13(self):\n\n        x = random.randint(0, self.nxC - 14)\n        y = random.randint(0, self.nyC - 14)\n\n        self.gameState[x:x+13,y:y+13] = [[0,0,1,1,0,0,0,0,0,1,1,0,0],\n                                         [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                                         [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                                         [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                                         [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                                         [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                                         [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                                         [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                                         [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                                         [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                                         [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                                         [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                                         [0,0,1,1,0,0,0,0,0,1,1,0,0]]\n\n    # Oscilador 12x12\n    def draw_oscilator12x12(self):\n\n        x = random.randint(0, self.nxC - 13)\n        y = random.randint(0, self.nyC - 13)\n\n        self.gameState[x:x+12,y:y+12] = [[0,0,0,0,0,0,1,1,0,0,0,0],\n                                         [0,0,0,0,0,0,1,1,0,0,0,0],\n                                         [0,0,0,0,0,0,0,0,0,0,0,0],\n                                         [0,0,0,0,1,1,1,1,0,0,0,0],\n                                         [1,1,0,1,0,0,0,0,1,0,0,0],\n                                         [1,1,0,1,0,0,1,0,1,0,0,0],\n                                         [0,0,0,1,0,0,0,1,1,0,1,1],\n                                         [0,0,0,1,0,1,0,0,1,0,1,1],\n                                         [0,0,0,0,1,1,1,1,0,0,0,0],\n                                         [0,0,0,0,0,0,0,0,0,0,0,0],\n                                         [0,0,0,0,1,1,0,0,0,0,0,0],\n                                         [0,0,0,0,1,1,0,0,0,0,0,0]]\n\n    # Oscilador 10x3\n    def draw_oscilator10x3(self):\n\n        x = random.randint(0, self.nxC - 11)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+10,y:y+3] = [[0,1,0],\n                                        [0,1,0],\n                                        [1,0,1],\n                                        [0,1,0],\n                                        [0,1,0],\n                                        [0,1,0],\n                                        [0,1,0],\n                                        [1,0,1],\n                                        [0,1,0],\n                                        [0,1,0]]\n\n    # Oscilador 9x9\n    def draw_oscilator9x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+9,y:y+9] = [[1,1,0,1,1,1,1,1,1],\n                                       [1,1,0,1,1,1,1,1,1],\n                                       [1,1,0,0,0,0,0,0,0],\n                                       [1,1,0,0,0,0,0,1,1],\n                                       [1,1,0,0,0,0,0,1,1],\n                                       [1,1,0,0,0,0,0,1,1],\n                                       [0,0,0,0,0,0,0,1,1],\n                                       [1,1,1,1,1,1,0,1,1],\n                                       [1,1,1,1,1,1,0,1,1]]\n\n    # Oscilador 6x6\n    def draw_oscilator6x6(self):\n\n        x = random.randint(0, self.nxC - 7)\n        y = random.randint(0, self.nyC - 7)\n\n        self.gameState[x:x+6,y:y+6] = [[0,1,0,0,1,0],\n                                       [1,0,1,1,0,1],\n                                       [0,1,0,0,1,0],\n                                       [0,1,0,0,1,0],\n                                       [1,0,1,1,0,1],\n                                       [0,1,0,0,1,0]]\n\n    # Oscilador 4x4\n    def draw_oscilator4x4(self):\n\n        x = random.randint(0, self.nxC - 5)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+4,y:y+4] = [[0,1,0,0],\n                                       [0,1,0,1],\n                                       [1,0,1,0],\n                                       [0,0,1,0]]\n\n    # Pistola 36x9\n    def draw_gun36x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 37)\n\n        self.gameState[x:x+9,y:y+36] = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n                                        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n                                        [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                                        [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\n\n    # Pistola 9x36\n    def draw_gun9x36(self):\n\n        x = random.randint(0, self.nxC - 37)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+36,y:y+9] = [[0,0,0,0,1,1,0,0,0],\n                                        [0,0,0,0,1,1,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,1,1,1,0,0],\n                                        [0,0,0,1,0,0,0,1,0],\n                                        [0,0,1,0,0,0,0,0,1],\n                                        [0,0,1,0,0,0,0,0,1],\n                                        [0,0,0,0,0,1,0,0,0],\n                                        [0,0,0,1,0,0,0,1,0],\n                                        [0,0,0,0,1,1,1,0,0],\n                                        [0,0,0,0,0,1,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,1,1,1,0,0,0,0],\n                                        [0,0,1,1,1,0,0,0,0],\n                                        [0,1,0,0,0,1,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [1,1,0,0,0,1,1,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,0,0,0,0,0,0,0],\n                                        [0,0,1,1,0,0,0,0,0],\n                                        [0,0,1,1,0,0,0,0,0]]\n\n\ninstructions = ['',\n                '------------------ USAGE ------------------',\n                'CLICK A CELL WITH MOUSE BUTTON:',\n                '    - RIGHT: FOR PUT IT ALIVE',\n                '    - LEFT: FOR PUT IT DEATH',\n                '-------------------------------------------',\n                'PRESS SPACEBAR FOR PAUSE',\n                'IT\\'S EASIER TO DRAW WHEN THE GAME IT\\'S',\n                'PAUSED',\n                '-------------------------------------------',\n                'PRESS LETTERS FOR DRAW PATRONS:',\n                '    - A: DRAW ACORN PATRON',\n                '    - U: DRAW A 13x13 OSCILATOR',\n                '    - K: DRAW A 12x12 OSCILATOR',\n                '    - Q: DRAW A 10X3 OSCILATOR',\n                '    - O: DRAW A 9X9 OSCILATOR',\n                '    - S: DRAW A 6X6 OSCILATOR',\n                '    - W: DRAW A 4X4 OSCILATOR',\n                '    - V: DRAW A 36X9 PLANES GUN',\n                '    - H: DRAW A 9X36 PLANES GUN',\n                '    - X: DRAW A 3X3 MOVIL AUTOMATON',\n                '    - N: DRAW A 7X4 MOVIL AUTOMATON',\n                '    - P: DRAW A 1X3 STICK AUTOMATON',\n                '    - D: DELETE ALL THE SCREEN',\n                '-------------------------------------------',\n                'SELECT THE CELL COLOR:',\n                '    - PRESS R: THE CELL WILL BE RED',\n                '    - PRESS G: THE CELL WILL BE GREEN',\n                '    - PRESS B: THE CELL WILL BE BLUE',\n                '    - PRESS C: THE CELL WILL BE CYAN',\n                '    - PRESS Y: THE CELL WILL BE YELLOW',\n                '    - PRESS M: THE CELL WILL BE MAGENTA',\n                '    - PRESS Z: THE CELL WILL A RANDOM COLOR',\n                '-------------------------------------------',\n                'PRESS ESC FOR CLOSE THE WINDOW']\n\ndef write_instructions(screen, font, width, height):\n    text_height = (height - 50) / len(instructions)\n    for i in range(len(instructions)):\n        screen.blit(font.render(instructions[i], True, (255,255,255)), (width, 50 + (text_height * (i+1))))\n\n\nif __name__ == '__main__':\n    # Crear ventana de tamaño definido\n    width, height = 1500, 1000\n    text_width = 500\n    screen = pygame.display.set_mode((width, height))\n    pygame.display.set_caption('Super-Game Of Life')\n    # Color de fondo y pintar el fondo\n    bg = 30, 30, 30\n    screen.fill(bg)\n    game = Game(width - text_width, height, 50, 50)\n    # Fuentes\n    #font = pygame.font.Font('Anton-Regular.ttf',16)\n    font = pygame.font.Font('CutiveMono-Regular.ttf',16)\n    #font = pygame.font.Font('KidGames.ttf',16)\n\n    while True:\n\n        try:\n\n            screen.fill(bg)\n            write_instructions(screen, font, width - text_width + 50, height - 100)\n            time.sleep(0.1)\n            game.event_handler()\n            game.draw(screen)\n            pygame.display.flip()\n\n        except KeyboardInterrupt:\n            sys.exit('keyboard interrupt')"
    },
    {
        "hash": "a8c13d24f68175e52fdc41e7a22f2a933cf48f87",
        "date": "2020-09-15T18:00:47+02:00",
        "file": "button_class.py",
        "content": "import pygame\n\nclass Button:\n\n    def __init__(self, x, y, width, height,\n                 text=None,\n                 colour=(73,73,73), \n                 highLightedColour=(189,189,189),\n                 function=None,\n                 params=None,\n                 highLighted=False):\n    \n        self.image = pygame.Surface((width, height))\n        self.pos = (x, y)\n        self.rect = self.image.get_rect()\n        self.rect.topleft = self.pos\n        self.text = text\n        self.colour = colour\n        self.highLightedColour = highLightedColour\n        self.highLighted = highLighted\n        self.function = function\n        self.params = params\n        self.width = width\n        self.height = height\n\n    def update(self, mouse):\n    \n        if self.rect.collidepoint(mouse):\n            self.highLighted = True\n        else:\n            self.highLighted = False\n\n    def draw(self, screen):\n    \n        self.image.fill(self.highLightedColour if self.highLighted else self.colour)\n        self.drawText()\n        screen.blit(self.image, self.pos)\n\n    def click(self):\n\n        if self.params:\n            self.function(self.params)\n        else:\n            self.function()\n\n    def updateParams(self, params):\n    \n        self.params = params\n\n    def drawText(self):\n    \n        font = pygame.font.SysFont('CutiveMono-Regular.ttf', 30)\n        text = font.render(self.text, False, (0,0,0))\n        width, height = text.get_size()\n        x = (self.width - width) / 2\n        y = (self.height - height) / 2\n        self.image.blit(text, (x, y))"
    },
    {
        "hash": "a8c13d24f68175e52fdc41e7a22f2a933cf48f87",
        "date": "2020-09-15T18:00:47+02:00",
        "file": "settings.py",
        "content": "pause_text = {'english': ['PAUSE', 'RUNNING'],\n              'spanish': ['PAUSA', 'CORRIENDO']}\n\ninstructions = {'english': ['',\n                            '------------------ USAGE ------------------',\n                            'CLICK A CELL WITH MOUSE BUTTON:',\n                            '    - RIGHT: FOR PUT IT ALIVE',\n                            '    - LEFT: FOR PUT IT DEATH',\n                            '-------------------------------------------',\n                            'PRESS SPACEBAR FOR PAUSE',\n                            'IT\\'S EASIER TO DRAW WHEN THE GAME IT\\'S',\n                            'PAUSED',\n                            '-------------------------------------------',\n                            'PRESS LETTERS FOR DRAW PATRONS:',\n                            '    - A: DRAW ACORN PATRON',\n                            '    - U: DRAW A 13x13 OSCILATOR',\n                            '    - K: DRAW A 12x12 OSCILATOR',\n                            '    - Q: DRAW A 10X3 OSCILATOR',\n                            '    - O: DRAW A 9X9 OSCILATOR',\n                            '    - S: DRAW A 6X6 OSCILATOR',\n                            '    - W: DRAW A 4X4 OSCILATOR',\n                            '    - V: DRAW A 36X9 PLANES GUN',\n                            '    - H: DRAW A 9X36 PLANES GUN',\n                            '    - X: DRAW A 3X3 MOVIL AUTOMATON',\n                            '    - N: DRAW A 7X4 MOVIL AUTOMATON',\n                            '    - P: DRAW A 1X3 STICK AUTOMATON',\n                            '    - D: DELETE ALL THE SCREEN',\n                            '-------------------------------------------',\n                            'SELECT THE CELL COLOR:',\n                            '    - PRESS R: THE CELL WILL BE RED',\n                            '    - PRESS G: THE CELL WILL BE GREEN',\n                            '    - PRESS B: THE CELL WILL BE BLUE',\n                            '    - PRESS C: THE CELL WILL BE CYAN',\n                            '    - PRESS Y: THE CELL WILL BE YELLOW',\n                            '    - PRESS M: THE CELL WILL BE MAGENTA',\n                            '    - PRESS Z: THE CELL WILL A RANDOM COLOR',\n                            '-------------------------------------------',\n                            'PRESS ESC FOR CLOSE THE WINDOW'],\n                'spanish': ['',\n                            '--------------- MODO DE USO ---------------',\n                            'PULSA UNA CELDA CON EL BOTON DEL RATON:',\n                            '    - DERECHO: MARCARLO COMO VIVO',\n                            '    - IZQUIERDO: MARCARLO COMO MUERTO',\n                            '-------------------------------------------',\n                            'PULSA LA BARRA ESPACIADORA PARA PAUSAR',\n                            'ES MAS FACIL DIBUJAR CUANDO EL JUEGO ESTA',\n                            'PAUSADO',\n                            '-------------------------------------------',\n                            'PULSA LETRAS PARA DIBUJAR PATRONES:',\n                            '    - A: DIBUJAR UN PATRON ACORN',\n                            '    - U: DIBUJAR UN OSCILADOR DE 13x13',\n                            '    - K: DIBUJAR UN OSCILADOR DE 12x12',\n                            '    - Q: DIBUJAR UN OSCILADOR DE 10X3',\n                            '    - O: DIBUJAR UN OSCILADOR DE 9X9',\n                            '    - S: DIBUJAR UN OSCILADOR DE 6X6',\n                            '    - W: DIBUJAR UN OSCILADOR DE 4X4',\n                            '    - V: DIBUJAR UNA PISTOLA DE PLANOS DE',\n                            '         36X9',\n                            '    - H: DIBUJAR UNA PISTOLA DE PLANOS DE',\n                            '         9X36',\n                            '    - X: DIBUJAR UN AUTOMATA MOVIL DE 3X3',\n                            '    - N: DIBUJAR UN AUTOMATA MOVIL DE 7X4',\n                            '    - P: DIBUJAR UN AUTOMATA PALO DE 1X3',\n                            '    - D: BORRAR TODA LA PANTALLA',\n                            '-------------------------------------------',\n                            'SELECCIONA EL COLOR DE LA CELDA:',\n                            '    - PULSA R: LA CELDA SERA ROJA',\n                            '    - PULSA G: LA CELDA SERA VERDE',\n                            '    - PULSA B: LA CELDA SERA AZUL',\n                            '    - PULSA C: LA CELDA SERA CYAN',\n                            '    - PULSA Y: LA CELDA SERA AMARILLO',\n                            '    - PULSA M: LA CELDA SERA MAGENTA',\n                            '    - PULSA Z: LA CELDA SERA DE UN COLOR',\n                            '               ALEATORIO',\n                            '-------------------------------------------',\n                            'PULSA ESC PARA CERRAR LA VENTANA']}\n\ngun9x36 = [[0,0,0,0,1,1,0,0,0],\n           [0,0,0,0,1,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,1,1,1,0,0],\n           [0,0,0,1,0,0,0,1,0],\n           [0,0,1,0,0,0,0,0,1],\n           [0,0,1,0,0,0,0,0,1],\n           [0,0,0,0,0,1,0,0,0],\n           [0,0,0,1,0,0,0,1,0],\n           [0,0,0,0,1,1,1,0,0],\n           [0,0,0,0,0,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,1,1,1,0,0,0,0],\n           [0,0,1,1,1,0,0,0,0],\n           [0,1,0,0,0,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [1,1,0,0,0,1,1,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,1,1,0,0,0,0,0],\n           [0,0,1,1,0,0,0,0,0]]\n\ngun36x9 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n           [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n           [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n           [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\n\noscilator4x4 = [[0,1,0,0],\n                [0,1,0,1],\n                [1,0,1,0],\n                [0,0,1,0]]\n\noscilator6x6 = [[0,1,0,0,1,0],\n               [1,0,1,1,0,1],\n               [0,1,0,0,1,0],\n               [0,1,0,0,1,0],\n               [1,0,1,1,0,1],\n               [0,1,0,0,1,0]]\n\noscilator9x9 = [[1,1,0,1,1,1,1,1,1],\n                [1,1,0,1,1,1,1,1,1],\n                [1,1,0,0,0,0,0,0,0],\n                [1,1,0,0,0,0,0,1,1],\n                [1,1,0,0,0,0,0,1,1],\n                [1,1,0,0,0,0,0,1,1],\n                [0,0,0,0,0,0,0,1,1],\n                [1,1,1,1,1,1,0,1,1],\n                [1,1,1,1,1,1,0,1,1]]\n\noscilator10x3 = [[0,1,0],\n                 [0,1,0],\n                 [1,0,1],\n                 [0,1,0],\n                 [0,1,0],\n                 [0,1,0],\n                 [0,1,0],\n                 [1,0,1],\n                 [0,1,0],\n                 [0,1,0]]\n\noscilator12x12 = [[0,0,0,0,0,0,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,1,1,0,0,0,0],\n                  [1,1,0,1,0,0,0,0,1,0,0,0],\n                  [1,1,0,1,0,0,1,0,1,0,0,0],\n                  [0,0,0,1,0,0,0,1,1,0,1,1],\n                  [0,0,0,1,0,1,0,0,1,0,1,1],\n                  [0,0,0,0,1,1,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,0,0,0,0,0,0]]\n\noscilator13x13 = [[0,0,1,1,0,0,0,0,0,1,1,0,0],\n                  [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                  [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                  [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                  [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                  [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                  [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                  [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                  [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                  [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                  [0,0,1,1,0,0,0,0,0,1,1,0,0]]\n\nmovil7x4 = [[0,1,1,0],\n            [1,1,1,0],\n            [1,1,1,0],\n            [1,1,1,0],\n            [1,1,0,1],\n            [0,1,1,1],\n            [0,0,1,0]]\n\nmovil3x3 = [[0,1,0],\n            [0,0,1],\n            [1,1,1]]\n\nstick = [1,1,1]\n\nacorn = [[0,0,1],\n         [1,0,1],\n         [0,0,0],\n         [0,1,0],\n         [0,0,1],\n         [0,0,1],\n         [0,0,1]]"
    },
    {
        "hash": "5673b9b34d025627c11c41e0d78680ef099429b2",
        "date": "2020-09-15T18:01:33+02:00",
        "file": "game_of_life.py",
        "content": "import pygame, time, random, sys, settings\nfrom button_class import *\nimport numpy as np\n\nclass Game:\n\n    def __init__(self, width, text_width, height, nxC, nyC, language):\n        pygame.init()\n        # Estado de las celdas:\n        #   - 1: celula viva\n        #   - 0: celula muerta\n        self.width = width\n        self.text_width = text_width\n        self.height = height\n        self.nxC = nxC\n        self.nyC = nyC\n        self.dimCW = width / nxC\n        self.dimCH = height / nyC\n        self.gameState = np.zeros((nxC, nyC))\n        self.newGameState = np.zeros((nxC, nyC))\n        self.pause = True\n        self.cell_color = [[128, 128, 128], [255, 255, 255]]\n        self.font = pygame.font.Font('KidGames.ttf',64)\n        self.language = language\n        self.playing_buttons = []\n        self.load_buttons()\n\n    def event_handler(self):\n        for event in pygame.event.get():\n            # Detectamos si se presiona una tecla\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit('user quit')\n                \n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    self.pause = not self.pause\n                \n                # PATRONES\n                if event.key == pygame.K_a:\n                    # patron acorn\n                    self.draw_acorn()\n                if event.key == pygame.K_o:\n                    # oscilador 9x9\n                    self.draw_oscilator9x9()\n                if event.key == pygame.K_u:\n                    # oscilador 13x13\n                    self.draw_oscilator13x13()\n                if event.key == pygame.K_k:\n                    # oscilador 12x12\n                    self.draw_oscilator12x12()\n                if event.key == pygame.K_q:\n                    # oscilador 10x3\n                    self.draw_oscilator10x3()\n                if event.key == pygame.K_s:\n                    # oscilador 6x6\n                    self.draw_oscilator6x6()\n                if event.key == pygame.K_w:\n                    # oscilador 4x4\n                    self.draw_oscilator4x4()\n                if event.key == pygame.K_x:\n                    # automata movil 3x3\n                    self.draw_movil3x3()\n                if event.key == pygame.K_n:\n                    # automata movil 7x4\n                    self.draw_movil7x4()\n                if event.key == pygame.K_p:\n                    # automata palo 1x3\n                    self.draw_stick()\n                if event.key == pygame.K_v:\n                    # pistola vertical 36x9\n                    self.draw_gun36x9()\n                if event.key == pygame.K_h:\n                    # pistola horizontal 9x36\n                    self.draw_gun9x36()\n                    \n                # BORRAR\n                if event.key == pygame.K_d:\n                    self.gameState = np.zeros((self.nxC, self.nyC))\n                    time.sleep(0.01)\n                \n                # COLOR DE CELDA\n                if event.key == pygame.K_r:\n                    # Rojo\n                    self.cell_color[1] = [255,0,0]\n                if event.key == pygame.K_g:\n                    # Verde\n                    self.cell_color[1] = [0,255,0]\n                if event.key == pygame.K_b:\n                    # Azul\n                    self.cell_color[1] = [0,0,255]\n                if event.key == pygame.K_c:\n                    # Cyan\n                    self.cell_color[1] = [0,255,255]\n                if event.key == pygame.K_m:\n                    # Magenta\n                    self.cell_color[1] = [255,0,255]\n                if event.key == pygame.K_y:\n                    # Amarillo\n                    self.cell_color[1] = [255,255,0]\n                if event.key == pygame.K_z:\n                    # Random color\n                    self.cell_color[1] = [random.randint(0,255),random.randint(0,255),random.randint(0,255)]\n                \n                # SALIR\n                if event.key == pygame.K_ESCAPE:\n                    pygame.quit()\n                    sys.exit('user quit')\n\n            #Detectamos si se presiona el raton\n            if sum(pygame.mouse.get_pressed()) > 0:\n                posX, posY = pygame.mouse.get_pos()\n                celX, celY = int(np.floor(posX / self.dimCW)), int(np.floor(posY / self.dimCH))\n                if celX < self.nxC and celY < self.nyC:\n                    self.gameState[celX, celY] = not pygame.mouse.get_pressed()[2]\n                else:\n                    for button in self.playing_buttons:\n                        button.update(pygame.mouse.get_pos())\n                        if button.highLighted:\n                            button.click()\n\n    def update(self, x, y):\n        # Calculamos los vecinos cercanos\n        n_neigh = self.gameState[(x - 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y + 1) % self.nyC]\n\n        # Reglas:\n        #   - 1: Una celula muerta con 3 celulas vecinas vivas, revive\n        #   - 2: Una celula viva con menos de 2 o mas de 3 vecinas vivas, muere\n        if self.gameState[x, y] == 0 and n_neigh == 3:\n            self.newGameState[x, y] = 1\n        elif self.gameState[x, y] == 1 and (n_neigh < 2 or n_neigh > 3):\n            self.newGameState[x, y] = 0\n        \n        \n\n    def draw(self, screen):\n\n        self.draw_pause(screen)\n        self.write_instructions(screen)\n        self.newGameState = np.copy(self.gameState)\n\n        for y in range(self.nxC):\n            for x in range(self.nyC):\n                if not self.pause:\n                    self.update(x, y)\n\n                # Creamos el poligono de cada celda a dibujar\n                poly = [\n                    ((x)     * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y + 1) * self.dimCH),\n                    ((x)     * self.dimCW, (y + 1) * self.dimCH),\n                ]\n\n                # Dibujamos la celda para cada par x e y\n                color = self.cell_color[int(self.newGameState[x, y])]\n                border = not self.newGameState[x, y]\n                pygame.draw.polygon(screen, color, poly, border)\n        # Actualizamos el estado\n        self.gameState = np.copy(self.newGameState)\n        \n        for button in self.playing_buttons:\n            button.draw(screen)\n\n    def draw_pause(self, screen):\n\n        if self.pause:\n            color_pause = (255,0,0)\n            text_pause = settings.pause_text[self.language][0]\n        else:\n            color_pause = (0,255,0)\n            text_pause = settings.pause_text[self.language][1]\n\n        text = self.font.render(text_pause, True, color_pause)\n        w = self.width + (500 - text.get_width()) / 2\n        h = (100 - text.get_height()) / 2\n        screen.blit(text, (w, h))\n\n    # Patron Acorn\n    def draw_acorn(self):\n    \n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 8)\n\n        self.gameState[x:x+7,y:y+3] = settings.acorn\n\n    # Automata palo 1x3\n    def draw_stick(self):\n\n        x = random.randint(0, self.nxC - 1)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x,y:y+3] = settings.stick\n\n    # Automata movil 3x3\n    def draw_movil3x3(self):\n\n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+3,y:y+3] = settings.movil3x3\n\n    # Automata movil 7x4\n    def draw_movil7x4(self):\n\n        x = random.randint(0, self.nxC - 8)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+7,y:y+4] = settings.movil7x4\n\n    # Oscilador 13x13\n    def draw_oscilator13x13(self):\n\n        x = random.randint(0, self.nxC - 14)\n        y = random.randint(0, self.nyC - 14)\n\n        self.gameState[x:x+13,y:y+13] = settings.oscilator13x13\n\n    # Oscilador 12x12\n    def draw_oscilator12x12(self):\n\n        x = random.randint(0, self.nxC - 13)\n        y = random.randint(0, self.nyC - 13)\n\n        self.gameState[x:x+12,y:y+12] = settings.oscilator12x12\n\n    # Oscilador 10x3\n    def draw_oscilator10x3(self):\n\n        x = random.randint(0, self.nxC - 11)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+10,y:y+3] = settings.oscilator10x3\n\n    # Oscilador 9x9\n    def draw_oscilator9x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+9,y:y+9] = settings.oscilator9x9\n\n    # Oscilador 6x6\n    def draw_oscilator6x6(self):\n\n        x = random.randint(0, self.nxC - 7)\n        y = random.randint(0, self.nyC - 7)\n\n        self.gameState[x:x+6,y:y+6] = settings.oscilator6x6\n\n    # Oscilador 4x4\n    def draw_oscilator4x4(self):\n\n        x = random.randint(0, self.nxC - 5)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+4,y:y+4] = settings.oscilator4x4\n\n    # Pistola 36x9\n    def draw_gun36x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 37)\n\n        self.gameState[x:x+9,y:y+36] = settings.gun36x9\n\n    # Pistola 9x36\n    def draw_gun9x36(self):\n\n        x = random.randint(0, self.nxC - 37)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+36,y:y+9] = settings.gun9x36\n\n\n    def write_instructions(self, screen):\n        font = pygame.font.Font('CutiveMono-Regular.ttf',16)\n        instruct = settings.instructions[self.language]\n        text_height = (self.height - 150) / len(instruct)\n        for i in range(len(instruct)):\n            screen.blit(font.render(instruct[i], True, (255,255,255)),\n                        (self.width + 50, 50 + (text_height * (i+1))))\n\n    def change_language(self, language):\n        self.language = language\n\n    def load_buttons(self):\n    \n        self.playing_buttons.append(Button(self.width + 50,\n                                           self.height - 50, 100, 40,\n                                           function=self.change_language,\n                                           params='english',\n                                           colour=(27,142,207),\n                                           text='ENGLISH'))\n        self.playing_buttons.append(Button(self.width + self.text_width - 150,\n                                           self.height - 50, 100, 40,\n                                           function=self.change_language,\n                                           params='spanish',\n                                           colour=(27,142,207),\n                                           text='SPANISH',\n                                           highLighted=True))\n\nif __name__ == '__main__':\n    # Crear ventana de tamaño definido\n    width, height = 1500, 1000\n    text_width = 500\n    screen = pygame.display.set_mode((width, height))\n    pygame.display.set_caption('Super-Game Of Life')\n    # Color de fondo y pintar el fondo\n    bg = 30, 30, 30\n    screen.fill(bg)\n    # Crear el juego\n    game = Game(width - text_width, text_width, height, 50, 50, 'spanish')\n    \n    # Jugar\n    while True:\n\n        try:\n\n            screen.fill(bg)\n            time.sleep(0.1)\n            game.event_handler()\n            game.draw(screen)\n            pygame.display.flip()\n\n        except KeyboardInterrupt:\n            sys.exit('keyboard interrupt')"
    },
    {
        "hash": "13cc91889d4446be444c2719f6c1d66ac2616427",
        "date": "2020-09-15T18:34:24+02:00",
        "file": "settings.py",
        "content": "pause_text = {'english': ['PAUSE', 'RUNNING'],\n              'spanish': ['PAUSA', 'CORRIENDO']}\n\ninstructions = {'english': ['',\n                            '------------------ USAGE ------------------',\n                            'CLICK A CELL WITH MOUSE BUTTON:',\n                            '    - RIGHT: FOR PUT IT ALIVE',\n                            '    - LEFT: FOR PUT IT DEATH',\n                            '-------------------------------------------',\n                            'PRESS SPACEBAR FOR PAUSE',\n                            'IT\\'S EASIER TO DRAW WHEN THE GAME IT\\'S',\n                            'PAUSED',\n                            '-------------------------------------------',\n                            'PRESS LETTERS FOR DRAW PATRONS:',\n                            '    - A: DRAW ACORN PATRON',\n                            '    - E: DRAW DIEHARD PATRON',\n                            '    - U: DRAW A 13x13 OSCILATOR',\n                            '    - K: DRAW A 12x12 OSCILATOR',\n                            '    - Q: DRAW A 10X3 OSCILATOR',\n                            '    - O: DRAW A 9X9 OSCILATOR',\n                            '    - S: DRAW A 6X6 OSCILATOR',\n                            '    - W: DRAW A 4X4 OSCILATOR',\n                            '    - V: DRAW A 36X9 PLANES GUN',\n                            '    - H: DRAW A 9X36 PLANES GUN',\n                            '    - X: DRAW A 3X3 MOVIL AUTOMATON',\n                            '    - N: DRAW A 7X4 MOVIL AUTOMATON',\n                            '    - P: DRAW A 1X3 STICK AUTOMATON',\n                            '    - D: DELETE ALL THE SCREEN',\n                            '-------------------------------------------',\n                            'SELECT THE CELL COLOR:',\n                            '    - PRESS R: THE CELL WILL BE RED',\n                            '    - PRESS G: THE CELL WILL BE GREEN',\n                            '    - PRESS B: THE CELL WILL BE BLUE',\n                            '    - PRESS C: THE CELL WILL BE CYAN',\n                            '    - PRESS Y: THE CELL WILL BE YELLOW',\n                            '    - PRESS M: THE CELL WILL BE MAGENTA',\n                            '    - PRESS Z: THE CELL WILL A RANDOM COLOR',\n                            '-------------------------------------------',\n                            'PRESS ESC FOR CLOSE THE WINDOW'],\n                'spanish': ['',\n                            '--------------- MODO DE USO ---------------',\n                            'PULSA UNA CELDA CON EL BOTON DEL RATON:',\n                            '    - DERECHO: MARCARLO COMO VIVO',\n                            '    - IZQUIERDO: MARCARLO COMO MUERTO',\n                            '-------------------------------------------',\n                            'PULSA LA BARRA ESPACIADORA PARA PAUSAR',\n                            'ES MAS FACIL DIBUJAR CUANDO EL JUEGO ESTA',\n                            'PAUSADO',\n                            '-------------------------------------------',\n                            'PULSA LETRAS PARA DIBUJAR PATRONES:',\n                            '    - A: DIBUJAR UN PATRON ACORN',\n                            '    - E: DIBUJAR UN PATRON DIEHARD',\n                            '    - U: DIBUJAR UN OSCILADOR DE 13x13',\n                            '    - K: DIBUJAR UN OSCILADOR DE 12x12',\n                            '    - Q: DIBUJAR UN OSCILADOR DE 10X3',\n                            '    - O: DIBUJAR UN OSCILADOR DE 9X9',\n                            '    - S: DIBUJAR UN OSCILADOR DE 6X6',\n                            '    - W: DIBUJAR UN OSCILADOR DE 4X4',\n                            '    - V: DIBUJAR UNA PISTOLA DE PLANOS DE',\n                            '         36X9',\n                            '    - H: DIBUJAR UNA PISTOLA DE PLANOS DE',\n                            '         9X36',\n                            '    - X: DIBUJAR UN AUTOMATA MOVIL DE 3X3',\n                            '    - N: DIBUJAR UN AUTOMATA MOVIL DE 7X4',\n                            '    - P: DIBUJAR UN AUTOMATA PALO DE 1X3',\n                            '    - D: BORRAR TODA LA PANTALLA',\n                            '-------------------------------------------',\n                            'SELECCIONA EL COLOR DE LA CELDA:',\n                            '    - PULSA R: LA CELDA SERA ROJA',\n                            '    - PULSA G: LA CELDA SERA VERDE',\n                            '    - PULSA B: LA CELDA SERA AZUL',\n                            '    - PULSA C: LA CELDA SERA CYAN',\n                            '    - PULSA Y: LA CELDA SERA AMARILLO',\n                            '    - PULSA M: LA CELDA SERA MAGENTA',\n                            '    - PULSA Z: LA CELDA SERA DE UN COLOR',\n                            '               ALEATORIO',\n                            '-------------------------------------------',\n                            'PULSA ESC PARA CERRAR LA VENTANA']}\n\ngun9x36 = [[0,0,0,0,1,1,0,0,0],\n           [0,0,0,0,1,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,1,1,1,0,0],\n           [0,0,0,1,0,0,0,1,0],\n           [0,0,1,0,0,0,0,0,1],\n           [0,0,1,0,0,0,0,0,1],\n           [0,0,0,0,0,1,0,0,0],\n           [0,0,0,1,0,0,0,1,0],\n           [0,0,0,0,1,1,1,0,0],\n           [0,0,0,0,0,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,1,1,1,0,0,0,0],\n           [0,0,1,1,1,0,0,0,0],\n           [0,1,0,0,0,1,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [1,1,0,0,0,1,1,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0],\n           [0,0,1,1,0,0,0,0,0],\n           [0,0,1,1,0,0,0,0,0]]\n\ngun36x9 = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n           [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1],\n           [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n           [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n           [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]\n\noscilator4x4 = [[0,1,0,0],\n                [0,1,0,1],\n                [1,0,1,0],\n                [0,0,1,0]]\n\noscilator6x6 = [[0,1,0,0,1,0],\n               [1,0,1,1,0,1],\n               [0,1,0,0,1,0],\n               [0,1,0,0,1,0],\n               [1,0,1,1,0,1],\n               [0,1,0,0,1,0]]\n\noscilator9x9 = [[1,1,0,1,1,1,1,1,1],\n                [1,1,0,1,1,1,1,1,1],\n                [1,1,0,0,0,0,0,0,0],\n                [1,1,0,0,0,0,0,1,1],\n                [1,1,0,0,0,0,0,1,1],\n                [1,1,0,0,0,0,0,1,1],\n                [0,0,0,0,0,0,0,1,1],\n                [1,1,1,1,1,1,0,1,1],\n                [1,1,1,1,1,1,0,1,1]]\n\noscilator10x3 = [[0,1,0],\n                 [0,1,0],\n                 [1,0,1],\n                 [0,1,0],\n                 [0,1,0],\n                 [0,1,0],\n                 [0,1,0],\n                 [1,0,1],\n                 [0,1,0],\n                 [0,1,0]]\n\noscilator12x12 = [[0,0,0,0,0,0,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,1,1,0,0,0,0],\n                  [1,1,0,1,0,0,0,0,1,0,0,0],\n                  [1,1,0,1,0,0,1,0,1,0,0,0],\n                  [0,0,0,1,0,0,0,1,1,0,1,1],\n                  [0,0,0,1,0,1,0,0,1,0,1,1],\n                  [0,0,0,0,1,1,1,1,0,0,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,0,0,0,0,0,0],\n                  [0,0,0,0,1,1,0,0,0,0,0,0]]\n\noscilator13x13 = [[0,0,1,1,0,0,0,0,0,1,1,0,0],\n                  [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                  [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                  [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                  [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                  [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                  [0,0,0,0,0,0,0,0,0,0,0,0,0],\n                  [0,0,1,1,1,0,0,0,1,1,1,0,0],\n                  [0,1,0,1,0,1,0,1,0,1,0,1,0],\n                  [1,1,1,0,1,1,0,1,1,0,1,1,1],\n                  [1,0,0,1,0,1,0,1,0,1,0,0,1],\n                  [0,0,0,1,1,0,0,0,1,1,0,0,0],\n                  [0,0,1,1,0,0,0,0,0,1,1,0,0]]\n\nmovil7x4 = [[0,1,1,0],\n            [1,1,1,0],\n            [1,1,1,0],\n            [1,1,1,0],\n            [1,1,0,1],\n            [0,1,1,1],\n            [0,0,1,0]]\n\nmovil3x3 = [[0,1,0],\n            [0,0,1],\n            [1,1,1]]\n\nstick = [1,1,1]\n\ndiehard = [[0,1,0],\n           [0,1,1],\n           [0,0,0],\n           [0,0,0],\n           [0,0,0],\n           [0,0,1],\n           [1,0,1],\n           [0,0,1]]\n\nacorn = [[0,0,1],\n         [1,0,1],\n         [0,0,0],\n         [0,1,0],\n         [0,0,1],\n         [0,0,1],\n         [0,0,1]]"
    },
    {
        "hash": "7d122d7ee550bdb8bba0c909d49d0855f93e635e",
        "date": "2020-09-15T18:34:43+02:00",
        "file": "game_of_life.py",
        "content": "import pygame, time, random, sys, settings\nfrom button_class import *\nimport numpy as np\n\nclass Game:\n\n    def __init__(self, width, text_width, height, nxC, nyC, language):\n        pygame.init()\n        # Estado de las celdas:\n        #   - 1: celula viva\n        #   - 0: celula muerta\n        self.width = width\n        self.text_width = text_width\n        self.height = height\n        self.nxC = nxC\n        self.nyC = nyC\n        self.dimCW = width / nxC\n        self.dimCH = height / nyC\n        self.gameState = np.zeros((nxC, nyC))\n        self.newGameState = np.zeros((nxC, nyC))\n        self.pause = True\n        self.cell_color = [[128, 128, 128], [255, 255, 255]]\n        self.font = pygame.font.Font('KidGames.ttf',64)\n        self.language = language\n        self.playing_buttons = []\n        self.load_buttons()\n\n    def event_handler(self):\n        for event in pygame.event.get():\n            # Detectamos si se presiona una tecla\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit('user quit')\n                \n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_SPACE:\n                    self.pause = not self.pause\n                \n                # PATRONES\n                # MATUSALENES\n                if event.key == pygame.K_a:\n                    # patron acorn\n                    self.draw_acorn()\n                if event.key == pygame.K_e:\n                    # patron diehard\n                    self.draw_diehard()\n                # OSCILADORES\n                if event.key == pygame.K_o:\n                    # oscilador 9x9\n                    self.draw_oscilator9x9()\n                if event.key == pygame.K_u:\n                    # oscilador 13x13\n                    self.draw_oscilator13x13()\n                if event.key == pygame.K_k:\n                    # oscilador 12x12\n                    self.draw_oscilator12x12()\n                if event.key == pygame.K_q:\n                    # oscilador 10x3\n                    self.draw_oscilator10x3()\n                if event.key == pygame.K_s:\n                    # oscilador 6x6\n                    self.draw_oscilator6x6()\n                if event.key == pygame.K_w:\n                    # oscilador 4x4\n                    self.draw_oscilator4x4()\n                # AUTOMATAS\n                if event.key == pygame.K_x:\n                    # automata movil 3x3\n                    self.draw_movil3x3()\n                if event.key == pygame.K_n:\n                    # automata movil 7x4\n                    self.draw_movil7x4()\n                if event.key == pygame.K_p:\n                    # automata palo 1x3\n                    self.draw_stick()\n                # PISTOLAS\n                if event.key == pygame.K_v:\n                    # pistola vertical 36x9\n                    self.draw_gun36x9()\n                if event.key == pygame.K_h:\n                    # pistola horizontal 9x36\n                    self.draw_gun9x36()\n                    \n                # BORRAR\n                if event.key == pygame.K_d:\n                    self.gameState = np.zeros((self.nxC, self.nyC))\n                    time.sleep(0.01)\n                \n                # COLOR DE CELDA\n                if event.key == pygame.K_r:\n                    # Rojo\n                    self.cell_color[1] = [255,0,0]\n                if event.key == pygame.K_g:\n                    # Verde\n                    self.cell_color[1] = [0,255,0]\n                if event.key == pygame.K_b:\n                    # Azul\n                    self.cell_color[1] = [0,0,255]\n                if event.key == pygame.K_c:\n                    # Cyan\n                    self.cell_color[1] = [0,255,255]\n                if event.key == pygame.K_m:\n                    # Magenta\n                    self.cell_color[1] = [255,0,255]\n                if event.key == pygame.K_y:\n                    # Amarillo\n                    self.cell_color[1] = [255,255,0]\n                if event.key == pygame.K_z:\n                    # Random color\n                    self.cell_color[1] = [random.randint(0,255),random.randint(0,255),random.randint(0,255)]\n                \n                # SALIR\n                if event.key == pygame.K_ESCAPE:\n                    pygame.quit()\n                    sys.exit('user quit')\n\n            #Detectamos si se presiona el raton\n            if sum(pygame.mouse.get_pressed()) > 0:\n                posX, posY = pygame.mouse.get_pos()\n                celX, celY = int(np.floor(posX / self.dimCW)), int(np.floor(posY / self.dimCH))\n                if celX < self.nxC and celY < self.nyC:\n                    self.gameState[celX, celY] = not pygame.mouse.get_pressed()[2]\n                else:\n                    for button in self.playing_buttons:\n                        button.update(pygame.mouse.get_pos())\n                        if button.highLighted:\n                            button.click()\n\n    def update(self, x, y):\n        # Calculamos los vecinos cercanos\n        n_neigh = self.gameState[(x - 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y - 1) % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y)     % self.nyC] + \\\n                  self.gameState[(x - 1) % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x)     % self.nxC, (y + 1) % self.nyC] + \\\n                  self.gameState[(x + 1) % self.nxC, (y + 1) % self.nyC]\n\n        # Reglas:\n        #   - 1: Una celula muerta con 3 celulas vecinas vivas, revive\n        #   - 2: Una celula viva con menos de 2 o mas de 3 vecinas vivas, muere\n        if self.gameState[x, y] == 0 and n_neigh == 3:\n            self.newGameState[x, y] = 1\n        elif self.gameState[x, y] == 1 and (n_neigh < 2 or n_neigh > 3):\n            self.newGameState[x, y] = 0\n        \n        \n\n    def draw(self, screen):\n\n        self.draw_pause(screen)\n        self.write_instructions(screen)\n        self.newGameState = np.copy(self.gameState)\n\n        for y in range(self.nxC):\n            for x in range(self.nyC):\n                if not self.pause:\n                    self.update(x, y)\n\n                # Creamos el poligono de cada celda a dibujar\n                poly = [\n                    ((x)     * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y)     * self.dimCH),\n                    ((x + 1) * self.dimCW, (y + 1) * self.dimCH),\n                    ((x)     * self.dimCW, (y + 1) * self.dimCH),\n                ]\n\n                # Dibujamos la celda para cada par x e y\n                color = self.cell_color[int(self.newGameState[x, y])]\n                border = not self.newGameState[x, y]\n                pygame.draw.polygon(screen, color, poly, border)\n        # Actualizamos el estado\n        self.gameState = np.copy(self.newGameState)\n        \n        for button in self.playing_buttons:\n            button.draw(screen)\n\n    def draw_pause(self, screen):\n\n        if self.pause:\n            color_pause = (255,0,0)\n            text_pause = settings.pause_text[self.language][0]\n        else:\n            color_pause = (0,255,0)\n            text_pause = settings.pause_text[self.language][1]\n\n        text = self.font.render(text_pause, True, color_pause)\n        w = self.width + (500 - text.get_width()) / 2\n        h = (100 - text.get_height()) / 2\n        screen.blit(text, (w, h))\n\n    # Patron Acorn\n    def draw_acorn(self):\n    \n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 8)\n\n        self.gameState[x:x+7,y:y+3] = settings.acorn\n\n    # Patron Diehard\n    def draw_diehard(self):\n    \n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 9)\n\n        self.gameState[x:x+8,y:y+3] = settings.diehard\n\n    # Automata palo 1x3\n    def draw_stick(self):\n\n        x = random.randint(0, self.nxC - 1)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x,y:y+3] = settings.stick\n\n    # Automata movil 3x3\n    def draw_movil3x3(self):\n\n        x = random.randint(0, self.nxC - 4)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+3,y:y+3] = settings.movil3x3\n\n    # Automata movil 7x4\n    def draw_movil7x4(self):\n\n        x = random.randint(0, self.nxC - 8)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+7,y:y+4] = settings.movil7x4\n\n    # Oscilador 13x13\n    def draw_oscilator13x13(self):\n\n        x = random.randint(0, self.nxC - 14)\n        y = random.randint(0, self.nyC - 14)\n\n        self.gameState[x:x+13,y:y+13] = settings.oscilator13x13\n\n    # Oscilador 12x12\n    def draw_oscilator12x12(self):\n\n        x = random.randint(0, self.nxC - 13)\n        y = random.randint(0, self.nyC - 13)\n\n        self.gameState[x:x+12,y:y+12] = settings.oscilator12x12\n\n    # Oscilador 10x3\n    def draw_oscilator10x3(self):\n\n        x = random.randint(0, self.nxC - 11)\n        y = random.randint(0, self.nyC - 4)\n\n        self.gameState[x:x+10,y:y+3] = settings.oscilator10x3\n\n    # Oscilador 9x9\n    def draw_oscilator9x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+9,y:y+9] = settings.oscilator9x9\n\n    # Oscilador 6x6\n    def draw_oscilator6x6(self):\n\n        x = random.randint(0, self.nxC - 7)\n        y = random.randint(0, self.nyC - 7)\n\n        self.gameState[x:x+6,y:y+6] = settings.oscilator6x6\n\n    # Oscilador 4x4\n    def draw_oscilator4x4(self):\n\n        x = random.randint(0, self.nxC - 5)\n        y = random.randint(0, self.nyC - 5)\n\n        self.gameState[x:x+4,y:y+4] = settings.oscilator4x4\n\n    # Pistola 36x9\n    def draw_gun36x9(self):\n\n        x = random.randint(0, self.nxC - 10)\n        y = random.randint(0, self.nyC - 37)\n\n        self.gameState[x:x+9,y:y+36] = settings.gun36x9\n\n    # Pistola 9x36\n    def draw_gun9x36(self):\n\n        x = random.randint(0, self.nxC - 37)\n        y = random.randint(0, self.nyC - 10)\n\n        self.gameState[x:x+36,y:y+9] = settings.gun9x36\n\n\n    def write_instructions(self, screen):\n        font = pygame.font.Font('CutiveMono-Regular.ttf',16)\n        instruct = settings.instructions[self.language]\n        text_height = (self.height - 150) / len(instruct)\n        for i in range(len(instruct)):\n            screen.blit(font.render(instruct[i], True, (255,255,255)),\n                        (self.width + 50, 50 + (text_height * (i+1))))\n\n    def change_language(self, language):\n        self.language = language\n\n    def load_buttons(self):\n    \n        self.playing_buttons.append(Button(self.width + 50,\n                                           self.height - 50, 100, 40,\n                                           function=self.change_language,\n                                           params='english',\n                                           colour=(27,142,207),\n                                           text='ENGLISH'))\n        self.playing_buttons.append(Button(self.width + self.text_width - 150,\n                                           self.height - 50, 100, 40,\n                                           function=self.change_language,\n                                           params='spanish',\n                                           colour=(27,142,207),\n                                           text='SPANISH',\n                                           highLighted=True))\n\nif __name__ == '__main__':\n    # Crear ventana de tamaño definido\n    width, height = 1500, 1000\n    text_width = 500\n    screen = pygame.display.set_mode((width, height))\n    pygame.display.set_caption('Super-Game Of Life')\n    # Color de fondo y pintar el fondo\n    bg = 30, 30, 30\n    screen.fill(bg)\n    # Crear el juego\n    game = Game(width - text_width, text_width, height, 50, 50, 'spanish')\n    \n    # Jugar\n    while True:\n\n        try:\n\n            screen.fill(bg)\n            time.sleep(0.1)\n            game.event_handler()\n            game.draw(screen)\n            pygame.display.flip()\n\n        except KeyboardInterrupt:\n            sys.exit('keyboard interrupt')"
    }
]